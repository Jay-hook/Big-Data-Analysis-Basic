welfare_copy %>%
filter(!is.na(income)) %>%
group_by(gender) %>%
summarise(income_mean = mean(income)) -> gender_income
ggplot(
data = gender_income,
aes(x = gender, y=income_mean)
) + geom_col()
welfare_copy$birth
2015 - welfare_copy$birth
welfare_copy %>%
mutate(age = 2015 - birth)
welfare_copy %>%
mutate(age = 2015 - birth) -> welfare_copy
table(is.na(welfare_copy$age))
table(welfare_copy$age < 0)
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(income_mean = mean(income))
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(income_mean = mean(income)) -> age_income
## 시각화
ggplot(
data = age_income,
aes(x = age, y = income_mean)
) + geom_col()
# 가장 많은 임금을 받는 나이를 확인해보자
age_income %>%
arrange(desc(income_mean)) %>%
head(1)
# 가장 많은 임금을 받는 나이를 확인해보자
age_income %>%
arrange(desc(income_mean)) %>%
tail(10)
# 가장 많은 임금을 받는 나이를 확인해보자
age_income %>%
arrange(desc(income_mean)) %>%
head(10)
## sav 파일 로드
## 패키지 설치
install.packages('foreign')
library(foreign)
welfare = read.spss("../csv/Koweps_hpc10_2015_beta1.sav",
to.data.frame = T)
welfare = rename(
welfare,
gender = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9
)
library(dplyr)
library(ggplot2)
welfare %>%
select(
gender,
birth,
marriage,
religion,
income,
code_job
) -> welfare_copy
welfare = rename(
welfare,
gender = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9
)
welfare %>%
select(
gender,
birth,
marriage,
religion,
income,
code_job
) -> welfare_copy
## 데이터프레임의 결측치를 확인
table(is.na(welfare_copy))
## gender가 1 인 경우 'male',
## gender가 2 인 경우 'female',
## gender가 9 인 경우 'n'
ifelse(
welfare_copy$gender == 1,
"male",
ifelse(
welfare_copy$gender == 2,
'female',
'n'
)
) -> welfare_copy$gender
#case2
ifelse(
welfare_copy$income %in% c(0, 9999),
NA,
welfare_copy$income
) -> welfare_copy$income
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(gender) %>%
summarise(income_mean = mean(income)) -> gender_income
ggplot(
data = gender_income,
aes(x = gender, y=income_mean)
) + geom_col()
2015 - welfare_copy$birth -> welfare_copy$age
table(is.na(welfare_copy$age))
table(welfare_copy$age < 0)
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(income_mean = mean(income)) -> age_income
## 시각화
ggplot(
data = age_income,
aes(x = age, y = income_mean)
) + geom_col()
# 가장 많은 임금을 받는 나이를 확인해보자
age_income %>%
arrange(desc(income_mean)) %>%
head(10)
# case1
ifelse(
welfare_copy$age < 30,
'young',
ifelse(
welfare_copy$age < 60,
'middle',
'old'
)
)
# case1
ifelse(
welfare_copy$age < 30,
'young',
ifelse(
welfare_copy$age < 60,
'middle',
'old'
)
) -> welfare_copy$ageg
# case2 (dplyr 패키지 사용)
welfare_copy %>%
mutate(ageg = ifelse(
age < 30 ,
'young',
ifelse(
age < 60,
'middle',
'old'
)
))
# case2 (dplyr 패키지 사용)
welfare_copy %>%
mutate(ageg = ifelse(
age < 30 ,
'young',
ifelse(
age < 60,
'middle',
'old'
)
)) -> welfare_copy
# 그룹화
# 월급의 결측치를 제외
# 연령대를 기준으로 그룹화
# 월급의 평균
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(ageg) %>%
summarise(income_mean = mean(income))
# 그룹화
# 월급의 결측치를 제외
# 연령대를 기준으로 그룹화
# 월급의 평균
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(ageg) %>%
summarise(income_mean = mean(income)) -> ageg_income
# 그래프 시각화
ggplot(
data = ageg_income,
aes(x = ageg, y=income_mean)
)
# 그래프 시각화
ggplot(
data = ageg_income,
aes(x = ageg, y=income_mean)
) + geom_col()
# 그래프의 순서를 커스텀하게 변경
ggplot(
data = ageg_income,
aes(x = ageg, y = income_mean)
) + geom_col() + scale_color_discrete(
limits = c('young', 'middle', 'old')
)
# 그래프의 순서를 커스텀하게 변경
ggplot(
data = ageg_income,
aes(x = ageg, y = income_mean)
) + geom_col() + scale_x_discrete(
limits = c('young', 'middle', 'old')
)
# 연령대, 성별을 기준으로 그룹화 하여 평균 월급을 확인
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(ageg, gender) %>%
summarise(income_mean = mean(income))
# 연령대, 성별을 기준으로 그룹화 하여 평균 월급을 확인
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(ageg, gender) %>%
summarise(income_mean = mean(income)) -> gender_income
gender_income
# 그래프 시각화
ggplot(
data = gender_income,
aes(x = ageg, y = income_mean)
) + geom_col()
# 그래프 시각화
ggplot(
data = gender_income,
aes(x = ageg, y = income_mean, fill=gender)
) + geom_col()
# 그래프 시각화
ggplot(
data = gender_income,
aes(x = ageg, y = income_mean, fill=gender)
) + geom_col() + scale_x_discrete(
limits = c('young', 'middle', 'old')
)
ggplot(
data = gender_income,
aes(x = ageg, y = income_mean, fill = gender)
) + geom_col(position = 'dodge') + scale_x_discrete(
limits = c('young', 'middle', 'old')
)
View(welfare_copy)
View(welfare_copy)
# 직업별로 평균 월급 어느정도인가?
# code_job컬럼이 존재 -> 직업을 숫자로 표현
# Koweps_Codebook.xlsx파일에 code에 맞는 직업 데이터가 존재
# 엑셀파일을 로드 -> code와 맞는 직업을 join 결합
read.excel("../csv/Koweps_Codebook.xlsx")
library(readxl)
# 직업별로 평균 월급 어느정도인가?
# code_job컬럼이 존재 -> 직업을 숫자로 표현
# Koweps_Codebook.xlsx파일에 code에 맞는 직업 데이터가 존재
# 엑셀파일을 로드 -> code와 맞는 직업을 join 결합
read.excel("../csv/Koweps_Codebook.xlsx")
library(readxl)
# 직업별로 평균 월급 어느정도인가?
# code_job컬럼이 존재 -> 직업을 숫자로 표현
# Koweps_Codebook.xlsx파일에 code에 맞는 직업 데이터가 존재
# 엑셀파일을 로드 -> code와 맞는 직업을 join 결합
read.excel("../csv/Koweps_Codebook.xlsx")
# 직업별로 평균 월급 어느정도인가?
# code_job컬럼이 존재 -> 직업을 숫자로 표현
# Koweps_Codebook.xlsx파일에 code에 맞는 직업 데이터가 존재
# 엑셀파일을 로드 -> code와 맞는 직업을 join 결합
read_excel("../csv/Koweps_Codebook.xlsx")
# 직업별로 평균 월급 어느정도인가?
# code_job컬럼이 존재 -> 직업을 숫자로 표현
# Koweps_Codebook.xlsx파일에 code에 맞는 직업 데이터가 존재
# 엑셀파일을 로드 -> code와 맞는 직업을 join 결합
read_excel("../csv/Koweps_Codebook.xlsx", sheet = 2)
# 직업별로 평균 월급 어느정도인가?
# code_job컬럼이 존재 -> 직업을 숫자로 표현
# Koweps_Codebook.xlsx파일에 code에 맞는 직업 데이터가 존재
# 엑셀파일을 로드 -> code와 맞는 직업을 join 결합
read_excel("../csv/Koweps_Codebook.xlsx", sheet = 2, col_names = T)
# 직업별로 평균 월급 어느정도인가?
# code_job컬럼이 존재 -> 직업을 숫자로 표현
# Koweps_Codebook.xlsx파일에 code에 맞는 직업 데이터가 존재
# 엑셀파일을 로드 -> code와 맞는 직업을 join 결합
list_job = read_excel("../csv/Koweps_Codebook.xlsx", sheet = 2, col_names = T)
View(list_job)
View(welfare_copy)
# 두개의 데이터프레임을 결합
# 특정한 조건에 맞는 데이터들만 열 결합
# 특정한 조건? ->
head(welfare_copy, 1)
head(list_job, 1)
left_join(welfare_copy, list_job, by='code_job')
welfare_copy = left_join(welfare_copy, list_job, by='code_job')
View(welfare_copy)
welfare_inner = inner(welfare_copy, list_job, by='code_job')
welfare_inner = inner_join(welfare_copy, list_job, by='code_job')
View(welfare_inner)
# 데이터의 결합이 잘 되었는지 확인
welfare_copy %>%
filter(!is.na(code_job)) %>%
select(code_job, job) %>%
head(10)
## 직업별로 평균 월급
welfare_copy %>%
filter(!is.na(job))
## 직업별로 평균 월급
welfare_copy %>%
filter(!is.na(job) & is.na(income) )
## 직업별로 평균 월급
welfare_copy %>%
filter(is.na(job) & !is.na(income) )
## 직업별로 평균 월급
welfare_copy %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income_mean = mean(income))
## 직업별로 평균 월급
welfare_copy %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income_mean = mean(income)) -> job_income
# income_mean을 기준으로 내림차순 정렬 변경
# 상위10개 -> head(10)
job_income %>%
arrange(desc(income_mean)) %>%
head(10)
# income_mean을 기준으로 내림차순 정렬 변경
# 상위10개 -> head(10)
job_income %>%
arrange(desc(income_mean)) %>%
head(10) -> top10
# 그래프 시각화
ggplot(
data = top10,
aes(x = job, y = income_mean)
) + geom_col()
# 그래프 시각화
ggplot(
data = top10,
aes(x = reorder(job, income_mean), y = income_mean)
) + geom_col()
# 그래프 시각화
ggplot(
data = top10,
aes(x = reorder(job, -income_mean), y = income_mean)
) + geom_col()
# 그래프 시각화
ggplot(
data = top10,
aes(x = reorder(job, -income_mean), y = income_mean)
) + geom_col() + coord_flip()
# 그래프 시각화
ggplot(
data = top10,
aes(x = reorder(job, income_mean), y = income_mean)
) + geom_col() + coord_flip()
install.packages('ggiraphExtra')
library(ggiraphExtra)
library(ggplot2)
# 미국 주별 강력 범죄 데이터
head(USArrests)
str(USArrests)
install.packages(tibble)
install.packages("tibble")
library(tibble)
crime <- rownames_to_column(USArrests, var='state')
head(crime)
# 문자열 데이터를 모두 소문자로 변경
tolower(crime$state)
toupper(crime$state)
# 문자열 데이터를 모두 소문자로 변경
tolower(crime$state) -> crime$state
install.packages('maps')
# maps 패키지는 주별 위,경도가 들어있는 패키지
map_data('state')
# maps 패키지는 주별 위,경도가 들어있는 패키지
map_data('state') -> states_map
ggChoropleth(
data = crime,   # 지도에 표현이 될 데이터의 값
aes(
fill = Murder, # 색으로 표현될 데이터 변수
map_id = state # 지역 지군 변수
),
map = states_map, # 지도 데이터
)
ggChoropleth(
data = crime,   # 지도에 표현이 될 데이터의 값
aes(
fill = Murder, # 색으로 표현될 데이터 변수
map_id = state # 지역 지군 변수
),
map = states_map, # 지도 데이터
interactive = T
)
# 한국 시도별 인구가 어떻게 되는가?
install.packages('devtools')
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
# korpop1 : 2014년도 기준 인구 데이터(시도별)
# korpop2 : 2014년도 기준 인구 데이터(시군구별)
# korpop3 : 2014년도 기준 인구 데이터(읍면동별)
# kormap1 : 2014년도 기준 행정 지도(시도별)
# kormap2 : 2014년도 기준 행정 지도(시군구별)
# kormap3 : 2014년도 기준 행정 지도(읍면동별)
str(korpop1)
korpop1 <- rename(
korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
View(korpop1)
head(korpop1)
# 한글 깨짐 현상 시 인코딩의 방식을 UTF-8에서 CP949로 변경
iconv(korpop1$name, "UTF-8", "CP949")
View(korpop1)
ggChoropleth(
data = korpop1,
aes(
fill = pop,
map_id = code
),
map = kormap1
)
ggChoropleth(
data = korpop1,
aes(
fill = pop,
map_id = code
),
map = kormap1,
interactive = T
)
ggChoropleth(
data = korpop1,
aes(
fill = pop,
map_id = code,
tooltip = name
),
map = kormap1,
interactive = T
)
install.packages("plotly")
install.packages("dygraph")
install.packages("dygraphs")
library(plotly)
library(ggplot2)
ggplot(
data = mpg,
aes(
x = displ,
y = hwy,
col = drv
)
) + geom_point()
a = ggplot(
data = mpg,
aes(
x = displ,
y = hwy,
col = drv
)
) + geom_point()
a
ggplotly(a)
diamonds
ggplot(
data = diamonds,
aes(
x = cut,
fill = clarity
)
) + geom_bar()
ggplot(
data = diamonds,
aes(
x = cut,
fill = clarity
)
) + geom_bar(positon='dodge')
ggplot(
data = diamonds,
aes(
x = cut,
fill = clarity
)
) + geom_bar(position='dodge')
b = ggplot(
data = diamonds,
aes(
x = cut,
fill = clarity
)
) + geom_bar(position='dodge')
ggplotly(b)
library(dygraphs)
economics
# 시계열데이터 타입(xts) 변경
library(xts)
xts(economics$unemploy, order.by = economics$date)
eco = xts(economics$unemploy, order.by = economics$date)
dygraph(eco)
dygraph(eco) %>%
dyRangeSelector()
eco_1 = xts(economics$psavert, order.by = economics$date)
eco_2 = xts(economics$unemploy/1000, order.by = economics$date)
head(eco_1)
head(eco_2)
cbind(eco_1, eco_2)
eco2 = cbind(eco_1, eco_2)
dygraph(eco2)
dygraph(eco2) %>% dyRangeSelector()
